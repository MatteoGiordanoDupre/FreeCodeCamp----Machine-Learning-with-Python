def player(prev_play, opponent_history=[], sequences={}):
  stride = 3

  # the last move played by the opponent gets appended to a list
  if prev_play != '':
    opponent_history.append(prev_play)

  # if the list is shorter than the chosen stride, then we default to Rock as an output 
  if len(opponent_history) <= stride:
    return "R"

  # if the list is longer than 4, we remove the first element out of the list 
  if len(opponent_history) > stride + 1:
    opponent_history.pop(0)

  # join the list and increase the count in the dictionary
  seq = "".join(opponent_history)
  sequences[seq] = sequences.get(seq, 0) + 1

  # join the last 3 elements of the list and find which of the possible next plays has the highest chance of being played 
  seq     = "".join(opponent_history[-stride:])
  predict = max([seq+"R", seq+"P", seq+"S"],
                  key=lambda key: sequences.get(key,0))[-1]

  # choose the last element of the most played sequence and then play accordingly
  if predict == "R": return "P"
  if predict == "P": return "S"
  return "R"

